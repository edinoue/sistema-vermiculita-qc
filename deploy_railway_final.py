#!/usr/bin/env python
"""
Script de deploy final para Railway com todas as corre√ß√µes
"""

import os
import sys
import django
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vermiculita_system.settings')
django.setup()

from django.core.management import execute_from_command_line
from django.contrib.auth.models import User
from core.models import Shift, Plant, ProductionLine
from quality_control.models import Product, Property, AnalysisType
from quality_control.models_production import ProductionRegistration, ProductionLineRegistration, ProductionProductRegistration
from django.utils import timezone

def deploy_railway_final():
    """Deploy final para Railway com todas as corre√ß√µes"""
    print("üöÄ === Deploy Final para Railway ===")
    print(f"‚è∞ Timestamp: {datetime.now()}")
    
    try:
        # 1. Aplicar migra√ß√µes
        print("\n1Ô∏è‚É£ Aplicando migra√ß√µes...")
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ Migra√ß√µes aplicadas")
        
        # 2. Coletar arquivos est√°ticos
        print("\n2Ô∏è‚É£ Coletando arquivos est√°ticos...")
        execute_from_command_line(['manage.py', 'collectstatic', '--noinput'])
        print("‚úÖ Arquivos est√°ticos coletados")
        
        # 3. Configurar dados b√°sicos
        print("\n3Ô∏è‚É£ Configurando dados b√°sicos...")
        setup_basic_data()
        print("‚úÖ Dados b√°sicos configurados")
        
        # 4. Configurar produ√ß√£o de exemplo
        print("\n4Ô∏è‚É£ Configurando produ√ß√£o de exemplo...")
        setup_production_example()
        print("‚úÖ Produ√ß√£o de exemplo configurada")
        
        # 5. Criar superusu√°rio se n√£o existir
        print("\n5Ô∏è‚É£ Verificando superusu√°rio...")
        create_superuser_if_needed()
        print("‚úÖ Superusu√°rio verificado")
        
        print("\nüéâ === Deploy Final Conclu√≠do! ===")
        print("‚úÖ Todas as corre√ß√µes aplicadas")
        print("‚úÖ Sistema pronto para uso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante deploy: {e}")
        import traceback
        traceback.print_exc()
        return False

def setup_basic_data():
    """Configurar dados b√°sicos do sistema"""
    print("  üìä Configurando turnos...")
    
    # Turnos
    shift_a, created = Shift.objects.get_or_create(
        name='A',
        defaults={'start_time': '06:00:00', 'end_time': '18:00:00', 'description': 'Turno A (06:00 - 18:00)'}
    )
    if created:
        print(f"    ‚úÖ Turno A criado")
    else:
        print(f"    üìç Turno A j√° existe")
    
    shift_b, created = Shift.objects.get_or_create(
        name='B',
        defaults={'start_time': '18:00:00', 'end_time': '06:00:00', 'description': 'Turno B (18:00 - 06:00)'}
    )
    if created:
        print(f"    ‚úÖ Turno B criado")
    else:
        print(f"    üìç Turno B j√° existe")
    
    print("  üè≠ Configurando plantas...")
    
    # Planta principal
    plant, created = Plant.objects.get_or_create(
        code='VER01',
        defaults={
            'name': 'Planta Principal',
            'description': 'Planta principal de produ√ß√£o',
            'is_active': True
        }
    )
    if created:
        print(f"    ‚úÖ Planta {plant.name} criada")
    else:
        print(f"    üìç Planta {plant.name} j√° existe")
    
    print("  üì¶ Configurando produtos...")
    
    # Produtos
    products_data = [
        {'name': 'Vermiculita Expandida', 'code': 'VERM001', 'description': 'Vermiculita expandida padr√£o'},
        {'name': 'Vermiculita Agr√≠cola', 'code': 'VERM002', 'description': 'Vermiculita para uso agr√≠cola'},
        {'name': 'Vermiculita Industrial', 'code': 'VERM003', 'description': 'Vermiculita para uso industrial'},
    ]
    
    for prod_data in products_data:
        product, created = Product.objects.get_or_create(
            code=prod_data['code'],
            defaults={
                'name': prod_data['name'],
                'description': prod_data['description'],
                'is_active': True
            }
        )
        if created:
            print(f"    ‚úÖ Produto {product.name} criado")
        else:
            print(f"    üìç Produto {product.name} j√° existe")
    
    print("  üî¨ Configurando propriedades...")
    
    # Propriedades
    properties_data = [
        {'name': 'Teor de Vermiculita', 'code': 'TEOR_VERM', 'unit': '%', 'display_order': 1},
        {'name': 'Umidade', 'code': 'UMIDADE', 'unit': '%', 'display_order': 2},
        {'name': 'Densidade', 'code': 'DENSIDADE', 'unit': 'g/cm¬≥', 'display_order': 3},
        {'name': 'pH', 'code': 'PH', 'unit': '', 'display_order': 4},
    ]
    
    for prop_data in properties_data:
        property_obj, created = Property.objects.get_or_create(
            code=prop_data['code'],
            defaults={
                'name': prop_data['name'],
                'unit': prop_data['unit'],
                'display_order': prop_data['display_order'],
                'is_active': True
            }
        )
        if created:
            print(f"    ‚úÖ Propriedade {property_obj.name} criada")
        else:
            print(f"    üìç Propriedade {property_obj.name} j√° existe")
    
    print("  üìã Configurando tipos de an√°lise...")
    
    # Tipos de an√°lise
    analysis_types_data = [
        {'name': 'An√°lise Pontual', 'code': 'PONTUAL', 'description': 'An√°lise de amostra pontual'},
        {'name': 'An√°lise Composta', 'code': 'COMPOSTA', 'description': 'An√°lise de amostra composta'},
    ]
    
    for at_data in analysis_types_data:
        analysis_type, created = AnalysisType.objects.get_or_create(
            code=at_data['code'],
            defaults={
                'name': at_data['name'],
                'description': at_data['description'],
                'is_active': True
            }
        )
        if created:
            print(f"    ‚úÖ Tipo de an√°lise {analysis_type.name} criado")
        else:
            print(f"    üìç Tipo de an√°lise {analysis_type.name} j√° existe")

def setup_production_example():
    """Configurar produ√ß√£o de exemplo para o turno atual"""
    print("  üè≠ Configurando produ√ß√£o de exemplo...")
    
    # Obter turno atual
    current_time = timezone.now().time()
    current_date = timezone.now().date()
    
    if time(6, 0) <= current_time < time(18, 0):
        current_shift_name = 'A'
    else:
        current_shift_name = 'B'
    
    try:
        current_shift = Shift.objects.get(name=current_shift_name)
        print(f"    üìÖ Turno atual: {current_shift.name}")
    except Shift.DoesNotExist:
        print(f"    ‚ùå Turno '{current_shift_name}' n√£o encontrado")
        return
    
    # Obter operador admin
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        print("    ‚ùå Nenhum superusu√°rio encontrado")
        return
    
    # Criar ou obter ProductionRegistration
    production, created = ProductionRegistration.objects.get_or_create(
        date=current_date,
        shift=current_shift,
        defaults={'operator': admin_user, 'status': 'ACTIVE', 'observations': 'Produ√ß√£o de exemplo'}
    )
    
    if created:
        print(f"    ‚úÖ Produ√ß√£o criada para {current_date} - Turno {current_shift.name}")
    else:
        print(f"    üìç Produ√ß√£o j√° existe para {current_date} - Turno {current_shift.name}")
    
    # Adicionar linhas de produ√ß√£o
    plant = Plant.objects.filter(is_active=True).first()
    if plant:
        lines = ProductionLine.objects.filter(plant=plant, is_active=True)
        for line in lines:
            prod_line_reg, created = ProductionLineRegistration.objects.get_or_create(
                production=production,
                production_line=line,
                defaults={'is_active': True}
            )
            if created:
                print(f"      ‚úÖ Linha '{line.name}' adicionada")
            else:
                print(f"      üìç Linha '{line.name}' j√° est√° na produ√ß√£o")
    
    # Adicionar produtos
    products = Product.objects.filter(is_active=True)
    for product in products:
        prod_prod_reg, created = ProductionProductRegistration.objects.get_or_create(
            production=production,
            product=product,
            defaults={'is_active': True, 'product_type': 'Principal'}
        )
        if created:
            print(f"      ‚úÖ Produto '{product.name}' adicionado")
        else:
            print(f"      üìç Produto '{product.name}' j√° est√° na produ√ß√£o")

def create_superuser_if_needed():
    """Criar superusu√°rio se n√£o existir"""
    if not User.objects.filter(is_superuser=True).exists():
        print("    üîë Criando superusu√°rio...")
        User.objects.create_superuser(
            username='admin',
            email='admin@vermiculita.com',
            password='admin123'
        )
        print("    ‚úÖ Superusu√°rio 'admin' criado (senha: admin123)")
    else:
        print("    üìç Superusu√°rio j√° existe")

if __name__ == '__main__':
    deploy_railway_final()
