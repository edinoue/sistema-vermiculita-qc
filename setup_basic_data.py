#!/usr/bin/env python
"""
Script para criar dados b√°sicos necess√°rios para o sistema
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vermiculita_system.settings')
django.setup()

from django.contrib.auth.models import User
from quality_control.models import AnalysisType, Product, Property
from core.models import Plant, ProductionLine, Shift

def setup_basic_data():
    """Criar dados b√°sicos se n√£o existirem"""
    print("üîß Configurando dados b√°sicos...")
    
    # Criar tipos de an√°lise
    analysis_types = [
        {'code': 'PONTUAL', 'name': 'An√°lise Pontual', 'description': 'An√°lises realizadas diretamente no fluxo de produ√ß√£o'},
        {'code': 'COMPOSTA', 'name': 'An√°lise Composta', 'description': 'An√°lises que representam 12 horas de produ√ß√£o'},
    ]
    
    for at_data in analysis_types:
        analysis_type, created = AnalysisType.objects.get_or_create(
            code=at_data['code'],
            defaults=at_data
        )
        if created:
            print(f"‚úÖ Tipo de an√°lise criado: {analysis_type.name}")
        else:
            print(f"‚ÑπÔ∏è Tipo de an√°lise j√° existe: {analysis_type.name}")
    
    # Criar turnos
    shifts = [
        {'name': 'Manh√£', 'start_time': '06:00', 'end_time': '14:00'},
        {'name': 'Tarde', 'start_time': '14:00', 'end_time': '22:00'},
        {'name': 'Noite', 'start_time': '22:00', 'end_time': '06:00'},
    ]
    
    for shift_data in shifts:
        shift, created = Shift.objects.get_or_create(
            name=shift_data['name'],
            defaults=shift_data
        )
        if created:
            print(f"‚úÖ Turno criado: {shift.name}")
        else:
            print(f"‚ÑπÔ∏è Turno j√° existe: {shift.name}")
    
    # Criar planta primeiro
    plant, created = Plant.objects.get_or_create(
        name='Planta Principal',
        defaults={'description': 'Planta principal de produ√ß√£o'}
    )
    if created:
        print(f"‚úÖ Planta criada: {plant.name}")
    else:
        print(f"‚ÑπÔ∏è Planta j√° existe: {plant.name}")
    
    # Criar linhas de produ√ß√£o
    lines = [
        {'name': 'Linha 1', 'code': 'L1', 'description': 'Linha de produ√ß√£o principal', 'plant': plant},
        {'name': 'Linha 2', 'code': 'L2', 'description': 'Linha de produ√ß√£o secund√°ria', 'plant': plant},
    ]
    
    for line_data in lines:
        line, created = ProductionLine.objects.get_or_create(
            name=line_data['name'],
            defaults=line_data
        )
        if created:
            print(f"‚úÖ Linha de produ√ß√£o criada: {line.name}")
        else:
            print(f"‚ÑπÔ∏è Linha de produ√ß√£o j√° existe: {line.name}")
    
    # Criar produtos
    products = [
        {'code': 'VC', 'name': 'Vermiculita Concentrada', 'description': 'Vermiculita concentrada'},
        {'code': 'VE', 'name': 'Vermiculita Expandida', 'description': 'Vermiculita expandida'},
        {'code': 'AM30', 'name': 'AM30', 'description': 'Produto AM30'},
    ]
    
    for product_data in products:
        product, created = Product.objects.get_or_create(
            code=product_data['code'],
            defaults=product_data
        )
        if created:
            print(f"‚úÖ Produto criado: {product.name}")
        else:
            print(f"‚ÑπÔ∏è Produto j√° existe: {product.name}")
    
    # Criar propriedades
    properties = [
        {'identifier': 'UMIDADE', 'name': 'Umidade', 'unit': '%', 'category': 'F√çSICA', 'data_type': 'DECIMAL'},
        {'identifier': 'TEOR_VERM', 'name': 'Teor de Vermiculita', 'unit': '%', 'category': 'QU√çMICA', 'data_type': 'DECIMAL'},
        {'identifier': 'GRANULOMETRIA', 'name': 'Granulometria', 'unit': 'mm', 'category': 'F√çSICA', 'data_type': 'DECIMAL'},
    ]
    
    for prop_data in properties:
        property, created = Property.objects.get_or_create(
            identifier=prop_data['identifier'],
            defaults=prop_data
        )
        if created:
            print(f"‚úÖ Propriedade criada: {property.name}")
        else:
            print(f"‚ÑπÔ∏è Propriedade j√° existe: {property.name}")
    
    # Criar usu√°rio admin se n√£o existir
    if not User.objects.filter(username='admin').exists():
        User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
        print("‚úÖ Usu√°rio admin criado: admin/admin123")
    else:
        print("‚ÑπÔ∏è Usu√°rio admin j√° existe")
    
    print("\nüéâ Dados b√°sicos configurados com sucesso!")
    return True

if __name__ == "__main__":
    success = setup_basic_data()
    sys.exit(0 if success else 1)
